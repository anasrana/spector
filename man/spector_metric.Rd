% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spector_qc.R, R/sr-metric.R
\name{spector_qc}
\alias{spector_metric}
\alias{spector_qc}
\title{Compute QC (spector metric) for bam files.}
\usage{
spector_qc(f_bam = NULL, file_type = "bam", f_delim = "\\t",
  out_F = NULL, file_cores = 1, smr_var = "rms", save_out = FALSE, ...)

spector_metric(f_bam = NULL, region_size = NULL, f_bed = NULL,
  bed_header = FALSE, region_giab = TRUE, chr_cores = 1)
}
\arguments{
\item{f_bam}{a string with path to \code{bam} file(s), it can link to
\code{*.bam} file (the full relative path is required), a folder with
\code{*.bam} files, or a file with with structure specified later.}

\item{file_type}{type of file passed to f_bam (Optional). This is to ensure
the automated checks pick up the correct format. The possible options
are \code{"list"}, \code{"bam"}, and \code{"dir"}.}

\item{f_delim}{the delimiter character used in \code{f_bam} file if not
\code{bam} or folder (Optional). It is only used when
\code{file_type = "list"}, with the default \code{f_delim = "\t"}.}

\item{out_F}{(Optional) Folder path to save output. If omitted results
will be returned, but not saved.}

\item{file_cores}{integer. Optional number indicating if the QC should be
computed in parallel across all input files.}

\item{smr_var}{deprecated. Variable to use to compute summary.}

\item{save_out}{logical. Indicating if output from \code{spector_qc()}
should be saved.}

\item{region_size}{integer. Choose size of regions to calculate metric value.
The default \code{ = NULL} means \code{region_size = } maximum power
of 2 that fits in the smallest region.}

\item{f_bed}{file path for bed file to override default giab.}

\item{bed_header}{logical. \code{TRUE} if bed file has a header, the default
value is \code{FALSE}.}

\item{region_giab}{logical. Indicates whether or not giab regions are used,
defaults to \code{TRUE}.}

\item{chr_cores}{integer. Optional number indicating if the QC should be
computed in parallel across chromosomes. Default value is \code{1}.}

\item{f_bam}{path to bam file, relative to current working directory
(see \code{\link[base]{setwd}()} for more details).}
}
\value{
Output is a \code{tbl_df} object with a metric value for each region.
        Optionally the output can also be saved, if \code{out_F} is provided.

Object (\code{tbl_df}) of metric for all specified regions.
}
\description{
Wavelet based technique to compute a quality metric for regions
across the genome. Use \code{spector_qc()} to obtain QC metric values,
internally it calls \code{spector_metric()}. Always use \code{spector_qc()}
to access \code{spector} since it includes several checks and allows for
more flexibility. All \code{spector_metric} variables can be passed to
\code{spector_qc}.
}
\details{
The \code{spector_qc} function is the main function to use for QC in the
\pkg{spector} package. It will compute a quality control metric for specific
regions across the genome.
The default regions, supplied in the package, are based
on the genome in a bottle project
(\href{http://jimb.stanford.edu/giab/}{giab}) reliable regions, calculated
using \code{ReliableGenome} (\href{http://github.com/popitsch/wtchg-rg}{RG}).
It is also possible to supply custom regions as a bed file or a
\code{data.frame} object.

It is important to supply full paths to \code{f_bam}, and \code{f_bed}.
Though the path can be relative to the current working directory, which can
be set with \code{\link[base]{setwd}()}. This also applies to the first
column of a parameter file that can be supplied to \code{f_bam}.

The \code{spector_metric} function is the main function that calculates a
metric value for each region in the selected bed file.

The \code{spector_metric} function performs the actual calculations, but does
not include any checks or verifications so should ideally not be called
directly. It should be accessed via \code{\link{spector_qc}}.
}
\examples{
\dontrun{
# Compute QC on sampl1.bam with default options
spector_qc(f_bam = "sample1.bam")
}

s1_path <- spector_sample("sample1.bam")
basic_path <- spector_sample("basic.bed")

# Compute QC on sample1.bam with custom region size
spector_qc(f_bam = s1_path, region_size = 2^14)

# Compute QC on sample1.bam with custom bed file
spector_qc(f_bam = s1_path, f_bed = basic_path)

# Compute QC and save output results
spector_qc(f_bam = s1_path, f_bed = basic_path, out_F = "~/", save_out = T)

}

